---
- name: Update and Patch EC2 Windows
  hosts: Windows-server
  gather_facts: false
  tasks:
    - name: Check OS version
      win_shell: |
        if ([Environment]::OSVersion.Version.Major -le 5) {
            Write-Error 'This command is not supported on Windows 2003 or lower.'
            exit -1
        } elseif ([Environment]::OSVersion.Version.Major -ge 10) {
            $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU
            if ($sku -eq 143 -or $sku -eq 144) {
                Write-Host 'This command is not supported on Windows 2016 Nano Server.'
                exit -1
            }
        }
      register: os_check
      failed_when: false

    - name: Install PowerShell module dependencies
      win_shell: |
        $appName = 'PatchBaselineOperations'
        $psModuleFileName = 'Amazon.PatchBaselineOperations.dll'
        $s3FileName = 'Amazon.PatchBaselineOperationsDeprecated-1.1.zip'
        $s3LocationUsEast = 'https://s3.amazonaws.com/aws-ssm-{0}/' + $appName.ToLower() + '/' + $s3FileName
        $s3LocationRegular = 'https://s3-{0}.amazonaws.com/aws-ssm-{0}/' + $appName.ToLower() + '/' + $s3FileName
        $s3LocationCn = 'https://s3.{0}.amazonaws.com.cn/aws-ssm-{0}/' + $appName.ToLower() + '/' + $s3FileName
        $s3FileHash = '9B823BEDBA52C94F0BA332E1C024FB7F5F7ED9B7343DDC3B10027380B1E28561'
        $psModuleHashes = @{
            'Amazon.PatchBaselineOperations.dll' = 'D68C082591D3615BB35F884900F5F7012B336121462C98D395A50D5430672F32';
            'AWSSDK.Core.dll' = 'F024905CDFE4DE022DCD4D9BCF8EE9F237EE27D73DCC32CCB3A69DFC088EB2B0';
            'AWSSDK.S3.dll' = 'B24C349EC0ADEB8462B6B24A27D65650873830416FFF8E816852966C21E87267';
            'AWSSDK.SimpleSystemsManagement.dll' = '627CA33D6B2463C453EEC5F4767C5907D34EB6C1D49D106E5DC9413FADC9DAD9';
            'Newtonsoft.Json.dll' = '0516D4109263C126C779E4E8F5879349663FA0A5B23D6D44167403E14066E6F9';
            'THIRD_PARTY_LICENSES.txt' = '9C6EB75247F59B627FAF5F8E25633635DB30593B6C130C191CF3A302C1DC9FAE';
            'YamlDotNet.dll' = 'D59E777A42A965327FCC18FC0AB7FA6729C0BCF845D239AC2811BD78F73A7F70'
        }
        $tempDirectory = Split-Path -Parent $MyInvocation.MyCommand.Definition
        $downloadPath = [IO.Path]::Combine($tempDirectory, $s3FileName)
        $psModuleInstallLocation = [IO.Path]::Combine([Environment]::GetEnvironmentVariable([Environment+SpecialFolder]::ProgramFiles), 'Amazon', $appName)
        $psModuleInstallFile = [IO.Path]::Combine($psModuleInstallLocation, $psModuleFileName)

        # ... (rest of the script remains the same)

    - name: Install PowerShell module
      win_shell: |
        InstallPowerShellModule
      when: os_check.rc == 0 and ssm_check.rc == 0

    - name: Remove downloaded file
      win_command: rm "{{ downloadPath }}"
      when: downloadPath is defined
